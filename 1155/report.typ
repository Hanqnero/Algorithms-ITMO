= 1155. Дуоны
Ограничение времени: 0.5 секунды \
Ограничение памяти: 64 МБ

_Архангел по науке докладывает: \
— Господи, эти физики там, внизу, — они открыли ещё одну элементарную частицу! \
— Хорошо, добавим параметр в Общее Уравнение Вселенной._ \

С развитием техники физики находят всё новые и новые элементарные частицы, с
непонятными и даже загадочными свойствами. Многие слышали про мюоны, глюоны,
странные кварки и прочую нечисть. Недавно были обнаружены элементарные частицы
дуоны. Эти частицы названы так потому, что учёным удаётся создавать или
аннигилировать их только парами. Кстати, от дуонов одни неприятности, поэтому
от них стараются избавляться до начала экспериментов. Помогите физикам
избавиться от дуонов в их установке.

#align(center,
image(
	"image.jpg"
))

Экспериментальная установка состоит из восьми камер, которые расположены в
вершинах куба. Камеры промаркированы латинскими буквами A, B, C, …, H.
Технически возможно создать, или наоборот, аннигилировать, два дуона,
находящихся в смежных камерах. Вам нужно автоматизировать процесс удаления
дуонов из установки.

= Исходные данные

В единственной строке даны восемь целых чисел в пределах от 0 до 100,
описывающих количество дуонов в камерах установки (сначала в камере A, потом в
B, и т.д.).

= Результат

Выведите последовательность действий для удаления всех дуонов или слово
«IMPOSSIBLE», если это невозможно. Каждое действие должно быть описано в
отдельной строке, в следующем формате: маркер первой камеры, маркер второй
(смежной с первой), далее плюс либо минус (создать или аннигилировать пару
дуонов). Количество действий в последовательности не должно превосходить 1000.

= Решение

== Результат проверки 

#image(
	"AC.jpg"
)

#text(font: "Courier New")[
```cpp
#include <iostream>
#include <ostream>
#include <string>

const int pairs[12][2] = {{0, 1}, {1, 2}, {2, 3}, {0, 3}, {4, 5}, {5, 6},
                        {6, 7}, {4, 7}, {0, 4}, {1, 5}, {2, 6}, {3, 7}};
const std::string letters("ABCDEFGH");

int main() {
  int xs[8] = {0};
  for (int i = 0; i < 8; i++)
    std::cin >> xs[i];

  int red_sum = xs[0] + xs[2] + xs[5] + xs[7];
  int black_sum = xs[1] + xs[3] + xs[4] + xs[6];

  if (red_sum != black_sum) {
    std::cout << "IMPOSSIBLE" << std::endl;
    return 0;
  }

  for (int i = 0; i < 12; i++) {
    
    int a = pairs[i][0];
    int b = pairs[i][1];

//    std::cout << "looking at pair " << letters[a] << letters[b] << std::endl;

    int n = std::min(xs[a], xs[b]);
    if (n == 0)
      continue;
 //   std::cout << "Found adjacent at " << letters[a] << letters[b] << "of mag " << n << std::endl;
    xs[a] -= n;
    xs[b] -= n;
    red_sum -= n;
    black_sum -= n;
    while (n--)
      std::cout << letters[a] << letters[b] << "-\n";
  }

  // Blacks
  for (int i = 0; i < xs[6]; i++) {
    std::cout << "BC+\nCG-\n";
  }
  for (int i = 0; i < xs[4]; i++) {
    std::cout << "AB+\nAE-\n";
  }
  for (int i = 0; i < xs[3]; i++) {
    std::cout << "AB+\nAD-\n";
  }

  // Reds
  for (int i = 0; i < xs[7]; i++) {
    std::cout << "AE+\nEH-\n";
  }
  for (int i = 0; i < xs[5]; i++) {
    std::cout << "AE+\nEF-\n";
  }
  for (int i = 0; i < xs[2]; i++) {
    std::cout << "AB+\nBC-\n";
  }


  for (int i = 0; i < red_sum; i++) {
    std::cout << "AB-\n";
  }

  std::cout << std::flush;
  return 0;
}
```
]


